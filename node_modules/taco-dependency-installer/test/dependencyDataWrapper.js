/**
 *******************************************************
 *                                                     *
 *   Copyright (C) Microsoft. All rights reserved.     *
 *                                                     *
 *******************************************************
 */
/// <reference path="../../typings/dependencyInstallerInterfaces.d.ts" />
/// <reference path="../../typings/mocha.d.ts"/>
/// <reference path="../../typings/should.d.ts"/>
"use strict";
/* tslint:disable:no-var-requires */
// var require needed for should module to work correctly
// Note not import: We don't want to refer to shouldModule, but we need the require to occur since it modifies the prototype of Object.
var shouldModule = require("should");
/* tslint:enable:no-var-requires */
var path = require("path");
var DependencyDataWrapper = require("../utils/dependencyDataWrapper");
describe("DependencyDataWrapper", function () {
    // Important paths
    var testMetadataFile = path.resolve(__dirname, "test-data", "testMetadata.json");
    // Persistent dependency data wrapper instance
    var dependencyDataWrapper;
    // Utility functions
    function assertDoesNotExist(obj) {
        (!!obj).should.be.equal(false);
    }
    function assertArraysAreEqual(expected, actual) {
        expected.length.should.be.exactly(actual.length);
        expected.forEach(function (value) {
            actual.indexOf(value).should.not.be.exactly(-1);
        });
    }
    function assertObjectsAreEqual(expected, actual) {
        JSON.stringify(expected).should.be.exactly(JSON.stringify(actual));
    }
    before(function () {
        // Instantiate the persistent DependencyInstaller
        dependencyDataWrapper = new DependencyDataWrapper(testMetadataFile);
    });
    describe("getInstallDirectory()", function () {
        it("should return the correct install destination for a dependency", function () {
            var expectedResult1 = "installDestination_1_1.0_win32_ia32";
            var expectedResult2 = "installDestination_1_1.0_win32_x64";
            var expectedResult3 = "installDestination_1_1.0_darwin_ia32";
            var expectedResult4 = "installDestination_1_2.0_darwin_x64";
            var installDir1 = dependencyDataWrapper.getInstallDirectory("dependency1", "1.0", "win32", "ia32");
            var installDir2 = dependencyDataWrapper.getInstallDirectory("dependency1", "1.0", "win32", "x64");
            var installDir3 = dependencyDataWrapper.getInstallDirectory("dependency1", "1.0", "darwin", "ia32");
            var installDir4 = dependencyDataWrapper.getInstallDirectory("dependency1", "2.0", "darwin", "x64");
            installDir1.should.be.exactly(expectedResult1);
            installDir2.should.be.exactly(expectedResult2);
            installDir3.should.be.exactly(expectedResult3);
            installDir4.should.be.exactly(expectedResult4);
        });
        it("should not give errors when no install destination is available", function () {
            var installDir1 = dependencyDataWrapper.getInstallDirectory("dependency2", "1.0");
            var installDir2 = dependencyDataWrapper.getInstallDirectory("dependency4", "1.0");
            var installDir3 = dependencyDataWrapper.getInstallDirectory("dependency6", "1.0");
            var installDir4 = dependencyDataWrapper.getInstallDirectory("dependency1", "unknown");
            var installDir5 = dependencyDataWrapper.getInstallDirectory("unknown", "unknown");
            assertDoesNotExist(installDir1);
            assertDoesNotExist(installDir2);
            assertDoesNotExist(installDir3);
            assertDoesNotExist(installDir4);
            assertDoesNotExist(installDir5);
        });
    });
    describe("getDisplayName()", function () {
        it("should return the correct display name for a dependency", function () {
            var expectedResult1 = "displayName_1";
            var expectedResult2 = "displayName_5";
            var displayName1 = dependencyDataWrapper.getDisplayName("dependency1");
            var displayName2 = dependencyDataWrapper.getDisplayName("dependency5");
            displayName1.should.be.exactly(expectedResult1);
            displayName2.should.be.exactly(expectedResult2);
        });
        it("should not give errors for dependencies that don't have a display name", function () {
            var displayName1 = dependencyDataWrapper.getDisplayName("dependency2");
            var displayName2 = dependencyDataWrapper.getDisplayName("unknown");
            assertDoesNotExist(displayName1);
            assertDoesNotExist(displayName2);
        });
    });
    describe("getInstallerPath()", function () {
        it("should return the correct installer path for a dependency", function () {
            var expectedResult = "./installers/installerBase";
            var installerPath = dependencyDataWrapper.getInstallerPath("dependency1");
            installerPath.should.be.exactly(expectedResult);
        });
        it("should not give errors for dependencies that don't have an installer path", function () {
            var installerPath1 = dependencyDataWrapper.getInstallerPath("dependency2");
            var installerPath2 = dependencyDataWrapper.getInstallerPath("unknown");
            assertDoesNotExist(installerPath1);
            assertDoesNotExist(installerPath2);
        });
    });
    describe("getLicenseUrl()", function () {
        it("should return the correct license URL for a dependency", function () {
            var expectedResult1 = "licenseUrl_1";
            var expectedResult2 = "licenseUrl_4";
            var licenseUrl1 = dependencyDataWrapper.getLicenseUrl("dependency1");
            var licenseUrl2 = dependencyDataWrapper.getLicenseUrl("dependency4");
            licenseUrl1.should.be.exactly(expectedResult1);
            licenseUrl2.should.be.exactly(expectedResult2);
        });
        it("should not give errors for dependencies that don't have a license URL", function () {
            var licenseUrl1 = dependencyDataWrapper.getLicenseUrl("dependency2");
            var licenseUrl2 = dependencyDataWrapper.getLicenseUrl("dependency7");
            assertDoesNotExist(licenseUrl1);
            assertDoesNotExist(licenseUrl2);
        });
    });
    describe("getPrerequisites()", function () {
        it("should return the correct prerequisites list for a dependency", function () {
            var expectedResult1 = ["dependency5", "dependency7"];
            var expectedResult2 = [];
            var expectedResult3 = ["dependency5", "dependency6"];
            var prerequisites1 = dependencyDataWrapper.getPrerequisites("dependency1");
            var prerequisites2 = dependencyDataWrapper.getPrerequisites("dependency4");
            var prerequisites3 = dependencyDataWrapper.getPrerequisites("dependency7");
            assertArraysAreEqual(expectedResult1, prerequisites1);
            assertArraysAreEqual(expectedResult2, prerequisites2);
            assertArraysAreEqual(expectedResult3, prerequisites3);
        });
        it("should not give errors for dependencies that don't have a prerequisites list", function () {
            var prerequisites1 = dependencyDataWrapper.getPrerequisites("dependency2");
            var prerequisites2 = dependencyDataWrapper.getPrerequisites("unknown");
            assertDoesNotExist(prerequisites1);
            assertDoesNotExist(prerequisites2);
        });
    });
    describe("getInstallerInfo()", function () {
        it("should return the correct installer info for a dependency", function () {
            var expectedResult1 = {
                installSource: "installSource_1_1.0_win32_ia32",
                sha1: "sha1_1_1.0_win32_ia32",
                bytes: 0,
                installDestination: "installDestination_1_1.0_win32_ia32"
            };
            var expectedResult2 = {
                installSource: "installSource_1_2.0_darwin_x64",
                sha1: "sha1_1_2.0_darwin_x64",
                bytes: 0,
                installDestination: "installDestination_1_2.0_darwin_x64"
            };
            var expectedResult3 = {
                installSource: "installSource_5_1.0_win32_x64",
                sha1: "sha1_5_1.0_win32_x64",
                bytes: 0,
                installDestination: "installDestination_5_1.0_win32_x64"
            };
            var expectedResult4 = {
                installSource: "installSource_7_1.0_darwin_ia32",
                sha1: "sha1_7_1.0_darwin_ia32",
                bytes: 0,
                installDestination: "installDestination_5_1.0_darwin_ia32"
            };
            var installerData1 = dependencyDataWrapper.getInstallerInfo("dependency1", "1.0", "win32", "ia32");
            var installerData2 = dependencyDataWrapper.getInstallerInfo("dependency1", "2.0", "darwin", "x64");
            var installerData3 = dependencyDataWrapper.getInstallerInfo("dependency5", "1.0", "win32", "x64");
            var installerData4 = dependencyDataWrapper.getInstallerInfo("dependency7", "1.0", "darwin", "ia32");
            assertObjectsAreEqual(expectedResult1, installerData1);
            assertObjectsAreEqual(expectedResult2, installerData2);
            assertObjectsAreEqual(expectedResult3, installerData3);
            assertObjectsAreEqual(expectedResult4, installerData4);
        });
        it("should not give errors when no installer info is available", function () {
            var installerData1 = dependencyDataWrapper.getInstallerInfo("dependency2", "1.0");
            var installerData2 = dependencyDataWrapper.getInstallerInfo("dependency4", "1.0");
            var installerData3 = dependencyDataWrapper.getInstallerInfo("dependency6", "1.0");
            var installerData4 = dependencyDataWrapper.getInstallerInfo("dependency1", "unknown");
            var installerData5 = dependencyDataWrapper.getInstallerInfo("unknown", "unknown");
            assertDoesNotExist(installerData1);
            assertDoesNotExist(installerData2);
            assertDoesNotExist(installerData3);
            assertDoesNotExist(installerData4);
            assertDoesNotExist(installerData5);
        });
    });
    describe("getFirstValidVersion()", function () {
        it("should return the correct version info for a dependency", function () {
            var expectedResult1 = "1.0";
            var expectedResult2 = "1.0";
            var version1 = dependencyDataWrapper.getFirstValidVersion("dependency1", "win32", "ia32");
            var version2 = dependencyDataWrapper.getFirstValidVersion("dependency7", "darwin", "x64");
            version1.should.be.exactly(expectedResult1);
            version2.should.be.exactly(expectedResult2);
        });
        it("should not give errors when no version is supported for the current system", function () {
            var version1 = dependencyDataWrapper.getFirstValidVersion("dependency1", "win32", "unknown");
            var version2 = dependencyDataWrapper.getFirstValidVersion("dependency7", "unknown", "x64");
            var version3 = dependencyDataWrapper.getFirstValidVersion("unknown", "win32", "x64");
            var version4 = dependencyDataWrapper.getFirstValidVersion("dependency2", "win32", "x64");
            var version5 = dependencyDataWrapper.getFirstValidVersion("dependency4", "win32", "x64");
            var version6 = dependencyDataWrapper.getFirstValidVersion("dependency6", "win32", "x64");
            assertDoesNotExist(version1);
            assertDoesNotExist(version2);
            assertDoesNotExist(version3);
            assertDoesNotExist(version4);
            assertDoesNotExist(version5);
            assertDoesNotExist(version6);
        });
    });
    describe("dependencyExists()", function () {
        it("should correctly detect whether a dependency exists or not in our metadata", function () {
            var expectedResult1 = true;
            var expectedResult2 = false;
            var exists1 = dependencyDataWrapper.dependencyExists("dependency1");
            var exists2 = dependencyDataWrapper.dependencyExists("unknown");
            exists1.should.be.exactly(expectedResult1);
            exists2.should.be.exactly(expectedResult2);
        });
    });
    describe("versionExists()", function () {
        it("should correctly detect whether a version exists or not in our metadata", function () {
            var expectedResult1 = true;
            var expectedResult2 = true;
            var expectedResult3 = false;
            var expectedResult4 = false;
            var expectedResult5 = false;
            var expectedResult6 = true;
            var expectedResult7 = false;
            var exists1 = dependencyDataWrapper.versionExists("dependency1", "1.0");
            var exists2 = dependencyDataWrapper.versionExists("dependency1", "2.0");
            var exists3 = dependencyDataWrapper.versionExists("dependency1", "unknown");
            var exists4 = dependencyDataWrapper.versionExists("dependency2", "1.0");
            var exists5 = dependencyDataWrapper.versionExists("dependency4", "1.0");
            var exists6 = dependencyDataWrapper.versionExists("dependency6", "1.0");
            var exists7 = dependencyDataWrapper.versionExists("unknown", "1.0");
            exists1.should.be.exactly(expectedResult1);
            exists2.should.be.exactly(expectedResult2);
            exists3.should.be.exactly(expectedResult3);
            exists4.should.be.exactly(expectedResult4);
            exists5.should.be.exactly(expectedResult5);
            exists6.should.be.exactly(expectedResult6);
            exists7.should.be.exactly(expectedResult7);
        });
    });
    describe("isSystemSupported()", function () {
        it("should correctly detect whether a system is supported or not for the specified dependency", function () {
            var expectedResult1 = true;
            var expectedResult2 = true;
            var expectedResult3 = false;
            var expectedResult4 = false;
            var expectedResult5 = false;
            var expectedResult6 = true;
            var expectedResult7 = false;
            var expectedResult8 = false;
            var expectedResult9 = false;
            var expectedResult10 = false;
            var isSupported1 = dependencyDataWrapper.isSystemSupported("dependency1", "1.0", "win32", "ia32");
            var isSupported2 = dependencyDataWrapper.isSystemSupported("dependency1", "2.0", "win32", "ia32");
            var isSupported3 = dependencyDataWrapper.isSystemSupported("dependency1", "unknown", "win32", "ia32");
            var isSupported4 = dependencyDataWrapper.isSystemSupported("dependency1", "1.0", "unknown", "ia32");
            var isSupported5 = dependencyDataWrapper.isSystemSupported("dependency1", "1.0", "win32", "unknown");
            var isSupported6 = dependencyDataWrapper.isSystemSupported("dependency1", "1.0", "darwin", "x64");
            var isSupported7 = dependencyDataWrapper.isSystemSupported("dependency2", "1.0", "win32", "ia32");
            var isSupported8 = dependencyDataWrapper.isSystemSupported("dependency4", "1.0", "darwin", "ia32");
            var isSupported9 = dependencyDataWrapper.isSystemSupported("dependency6", "1.0", "win32", "x64");
            var isSupported10 = dependencyDataWrapper.isSystemSupported("unknown", "1.0", "win32", "ia32");
            isSupported1.should.be.exactly(expectedResult1);
            isSupported2.should.be.exactly(expectedResult2);
            isSupported3.should.be.exactly(expectedResult3);
            isSupported4.should.be.exactly(expectedResult4);
            isSupported5.should.be.exactly(expectedResult5);
            isSupported6.should.be.exactly(expectedResult6);
            isSupported7.should.be.exactly(expectedResult7);
            isSupported8.should.be.exactly(expectedResult8);
            isSupported9.should.be.exactly(expectedResult9);
            isSupported10.should.be.exactly(expectedResult10);
        });
    });
    describe("isImplicit()", function () {
        it("should correctly detect whether a version exists or not in our metadata", function () {
            var expectedResult1 = false;
            var expectedResult2 = true;
            var expectedResult3 = false;
            var isImplicit1 = dependencyDataWrapper.isImplicit("dependency1");
            var isImplicit2 = dependencyDataWrapper.isImplicit("dependency2");
            var isImplicit3 = dependencyDataWrapper.isImplicit("unknown");
            isImplicit1.should.be.exactly(expectedResult1);
            isImplicit2.should.be.exactly(expectedResult2);
            isImplicit3.should.be.exactly(expectedResult3);
        });
    });
});

//# sourceMappingURL=dependencyDataWrapper.js.map
