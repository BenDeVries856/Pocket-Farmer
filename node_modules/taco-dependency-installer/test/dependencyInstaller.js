/**
 *******************************************************
 *                                                     *
 *   Copyright (C) Microsoft. All rights reserved.     *
 *                                                     *
 *******************************************************
 */
/// <reference path="../../typings/dependencyInstallerInterfaces.d.ts" />
/// <reference path="../../typings/mocha.d.ts"/>
/// <reference path="../../typings/should.d.ts"/>
"use strict";
/* tslint:disable:no-var-requires */
// var require needed for should module to work correctly
// Note not import: We don't want to refer to shouldModule, but we need the require to occur since it modifies the prototype of Object.
var shouldModule = require("should");
/* tslint:enable:no-var-requires */
var fs = require("fs");
var os = require("os");
var path = require("path");
var rimraf = require("rimraf");
var wrench = require("wrench");
var dependencyInstallerModule = require("../dependencyInstaller");
var DependencyInstaller = dependencyInstallerModule.DependencyInstaller;
describe("DependencyInstaller", function () {
    // Important paths
    var runFolder = path.resolve(os.tmpdir(), "taco_dependency_installer_test_run");
    var tacoHome = path.join(runFolder, "taco_home");
    var installConfigFile = path.join(tacoHome, "installConfig.json");
    var testMetadataFile = path.resolve(__dirname, "test-data", "testMetadata.json");
    // Persistent dependency installer instance
    var dependencyInstaller;
    // Test data
    var mockCordovaReqsRaw = {
        android: [
            {
                id: "dependency1",
                name: "Dependency 1",
                installed: false
            },
            {
                id: "dependency2",
                name: "Dependency 2",
                installed: false,
                metadata: {}
            },
            {
                id: "dependency4",
                name: "Dependency 4",
                installed: false,
                metadata: {
                    version: "3.4.0"
                }
            },
            {
                id: "dependency7",
                name: "Dependency 7",
                installed: true
            },
            {
                id: "unknownDependency",
                name: "Unknown Dependency",
                installed: false
            }
        ],
        windows: [
            {
                id: "dependency3",
                name: "Dependency 3",
                installed: false
            },
            {
                id: "dependency5",
                name: "Dependency 5",
                installed: false
            },
            {
                id: "dependency6",
                name: "Dependency 6",
                installed: false
            }
        ]
    };
    var mockCordovaReqsOutput = [
        "Requirements check results for android:",
        "dependency1: not installed",
        "dependency2: not installed",
        "dependency4: not installed",
        "dependency7: installed 1.8.0",
        "unknownDependency: not installed",
        "Requirements check results for windows:",
        "dependency3: not installed",
        "dependency5: not installed",
        "dependency6: not installed",
        "Some of requirements check failed"
    ].join(os.EOL);
    // Utility functions
    function verifyDependencyArray(expectedIds, actualDependencies) {
        expectedIds.length.should.be.exactly(actualDependencies.length);
        expectedIds.forEach(function (id) {
            var expectedDepFound = actualDependencies.some(function (missingDep) {
                return missingDep.id === id;
            });
            expectedDepFound.should.be.equal(true);
        });
    }
    function verifyRequirementArray(expectedIds, actualRequirements) {
        expectedIds.length.should.be.exactly(actualRequirements.length);
        expectedIds.forEach(function (id) {
            var expectedDepFound = actualRequirements.some(function (req) {
                return req.id === id;
            });
            expectedDepFound.should.be.equal(true);
        });
    }
    before(function (done) {
        // Set ResourcesManager to test mode
        process.env["TACO_UNIT_TEST"] = true;
        // Set a temporary location for taco_home
        process.env["TACO_HOME"] = tacoHome;
        // Instantiate the persistent DependencyInstaller
        dependencyInstaller = new DependencyInstaller("parentSessionId", testMetadataFile);
        // Delete existing run folder if necessary
        rimraf(runFolder, function (err) {
            if (err) {
                done(err);
            }
            else {
                // Create the run folder for our tests
                wrench.mkdirSyncRecursive(runFolder, 511); // 511 decimal is 0777 octal
                done();
            }
        });
    });
    after(function (done) {
        // Restore ResourcesManager
        process.env["TACO_UNIT_TEST"] = false;
        // Clean up run folder
        rimraf(runFolder, done);
    });
    describe("parseMissingDependencies()", function () {
        beforeEach(function () {
            dependencyInstaller.missingDependencies = [];
            dependencyInstaller.unsupportedMissingDependencies = [];
        });
        it("should correctly parse missing and unsupported dependencies, in taco projects", function () {
            var expectedMissingDependencies = [
                "dependency1",
                "dependency5",
            ];
            var expectedUnsupportedDependencies = [
                "dependency4",
                "dependency6",
                "unknownDependency"
            ];
            dependencyInstaller.parseMissingDependencies(mockCordovaReqsRaw);
            var missingDependencies = dependencyInstaller.missingDependencies;
            var unsupportedDependencies = dependencyInstaller.unsupportedMissingDependencies;
            verifyDependencyArray(expectedMissingDependencies, missingDependencies);
            verifyRequirementArray(expectedUnsupportedDependencies, unsupportedDependencies);
        });
        it("should correctly parse missing and unsupported dependencies, in non-taco projects", function () {
            var expectedMissingDependencies = [
                "dependency1",
                "dependency5",
            ];
            var expectedUnsupportedDependencies = [
                "dependency4",
                "dependency6",
                "unknownDependency"
            ];
            dependencyInstaller.parseMissingDependencies(mockCordovaReqsOutput);
            var missingDependencies = dependencyInstaller.missingDependencies;
            var unsupportedDependencies = dependencyInstaller.unsupportedMissingDependencies;
            verifyDependencyArray(expectedMissingDependencies, missingDependencies);
            verifyRequirementArray(expectedUnsupportedDependencies, unsupportedDependencies);
        });
    });
    describe("parseFromString()", function () {
        it("should correctly parse the cordova requirements results from the string output", function () {
            var expectedDependencies = [
                "dependency1",
                "dependency2",
                "dependency3",
                "dependency4",
                "dependency5",
                "dependency6",
                "unknownDependency"
            ];
            var parsedRequirements = dependencyInstaller.parseFromString(mockCordovaReqsOutput);
            verifyRequirementArray(expectedDependencies, parsedRequirements);
        });
    });
    describe("parseFromRawResult()", function () {
        it("should correctly parse the cordova requirements results returned by the raw api call", function () {
            var expectedDependencies = [
                "dependency1",
                "dependency2",
                "dependency3",
                "dependency4",
                "dependency5",
                "dependency6",
                "unknownDependency"
            ];
            var parsedRequirements = dependencyInstaller.parseFromRawResult(mockCordovaReqsRaw);
            verifyRequirementArray(expectedDependencies, parsedRequirements);
        });
    });
    describe("sortDependencies()", function () {
        it("should correctly sort the missing dependencies according to their prerequisites", function () {
            var expectedOrder = [
                "dependency5",
                "dependency7",
                "dependency1"
            ];
            dependencyInstaller.missingDependencies = [
                {
                    id: "dependency1",
                    version: "1.0",
                    displayName: "test_value",
                    installDestination: "test_value"
                },
                {
                    id: "dependency5",
                    version: "1.0",
                    displayName: "test_value",
                    installDestination: "test_value"
                },
                {
                    id: "dependency7",
                    version: "1.0",
                    displayName: "test_value",
                    installDestination: "test_value"
                }
            ];
            dependencyInstaller.sortDependencies();
            dependencyInstaller.missingDependencies.forEach(function (value, index) {
                value.id.should.be.exactly(expectedOrder[index]);
            });
        });
        it("should sort the missing dependencies without error when there's only one dependency", function () {
            var expectedOrder = [
                "dependency1"
            ];
            dependencyInstaller.missingDependencies = [
                {
                    id: "dependency1",
                    version: "1.0",
                    displayName: "test_value",
                    installDestination: "test_value"
                }
            ];
            dependencyInstaller.sortDependencies();
            dependencyInstaller.missingDependencies.forEach(function (value, index) {
                value.id.should.be.exactly(expectedOrder[index]);
            });
        });
    });
    describe("canInstallDependency()", function () {
        it("should return false for missing id", function () {
            var dependency = {
                id: null,
                installed: false,
                metadata: {
                    version: "1.0"
                },
                name: "test_value"
            };
            var canInstall = dependencyInstaller.canInstallDependency(dependency);
            canInstall.should.be.equal(false);
        });
        it("should return false for unknown id", function () {
            var dependency = {
                id: "unknown",
                installed: false,
                metadata: {
                    version: "1.0"
                },
                name: "test_value"
            };
            var canInstall = dependencyInstaller.canInstallDependency(dependency);
            canInstall.should.be.equal(false);
        });
        it("should return true for implicit dependencies", function () {
            var dependency = {
                id: "dependency2",
                installed: false,
                metadata: {
                    version: "1.0"
                },
                name: "test_value"
            };
            var canInstall = dependencyInstaller.canInstallDependency(dependency);
            canInstall.should.be.equal(true);
        });
        it("should return false for a requested version that doesn't exist", function () {
            var dependency = {
                id: "dependency1",
                installed: false,
                metadata: {
                    version: "2.1.3" // In the test metadata file, dependency 1 only has a version "1.0"
                },
                name: "test_value"
            };
            var canInstall = dependencyInstaller.canInstallDependency(dependency);
            canInstall.should.be.equal(false);
        });
        it("should return false if the requested version exists, but the user's system is not supported", function () {
            var dependency = {
                id: "dependency6",
                installed: false,
                metadata: {
                    version: "1.0" // In the test metadata file, dependency 6 has a version "1.0", but no supported platforms for that version
                },
                name: "test_value"
            };
            var canInstall = dependencyInstaller.canInstallDependency(dependency);
            canInstall.should.be.equal(false);
        });
        it("should return true if the requested version exists and the user's system is supported", function () {
            var dependency = {
                id: "dependency1",
                installed: false,
                metadata: {
                    version: "1.0"
                },
                name: "test_value"
            };
            var canInstall = dependencyInstaller.canInstallDependency(dependency);
            canInstall.should.be.equal(true);
        });
        it("should return false if no version is requested, but the user's system is not supported", function () {
            var dependency = {
                id: "dependency6",
                installed: false,
                name: "test_value"
            };
            var canInstall = dependencyInstaller.canInstallDependency(dependency);
            canInstall.should.be.equal(false);
        });
        it("should return true if no version is requested and the user's system is supported", function () {
            var dependency = {
                id: "dependency1",
                installed: false,
                name: "test_value"
            };
            var canInstall = dependencyInstaller.canInstallDependency(dependency);
            canInstall.should.be.equal(true);
        });
    });
    describe("buildInstallConfigFile()", function () {
        var missingDependencies = [
            {
                id: "dependency1",
                version: "1.0",
                displayName: "test_value1",
                installDestination: "test_value1"
            },
            {
                id: "dependency5",
                version: "1.0",
                displayName: "test_value5",
                installDestination: "test_value5"
            },
            {
                id: "dependency7",
                version: "1.0",
                displayName: "test_value7",
                installDestination: "test_value7"
            }
        ];
        var jsonWrapper = {
            dependencies: missingDependencies
        };
        beforeEach(function () {
            if (fs.existsSync(installConfigFile)) {
                fs.unlinkSync(installConfigFile);
            }
            dependencyInstaller.missingDependencies = missingDependencies;
        });
        it("should correctly generate the install config file", function () {
            dependencyInstaller.buildInstallConfigFile();
            var content = require(installConfigFile);
            JSON.stringify(content).should.be.exactly(JSON.stringify(jsonWrapper));
        });
        it("should correctly generate the install config file when one already exists", function () {
            var dummyContent = {
                test: "test"
            };
            // Write a dummy installConfig file
            wrench.mkdirSyncRecursive(path.dirname(installConfigFile), 511); // 511 decimal is 0777 octal
            fs.writeFileSync(installConfigFile, JSON.stringify(dummyContent, null, 4));
            // Write the real installConfig file
            dependencyInstaller.buildInstallConfigFile();
            var content = require(installConfigFile);
            JSON.stringify(content).should.be.exactly(JSON.stringify(jsonWrapper));
        });
    });
});

//# sourceMappingURL=dependencyInstaller.js.map
