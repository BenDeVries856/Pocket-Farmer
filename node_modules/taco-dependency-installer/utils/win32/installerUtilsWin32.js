/**
 *******************************************************
 *                                                     *
 *   Copyright (C) Microsoft. All rights reserved.     *
 *                                                     *
 *******************************************************
 */
"use strict";
var childProcess = require("child_process");
var path = require("path");
var Q = require("q");
var installerUtils = require("../installerUtils");
var tacoUtils = require("taco-utils");
var resources = require("../../resources/resourceManager");
var utilHelper = tacoUtils.UtilHelper;
var InstallerUtilsWin32 = (function () {
    function InstallerUtilsWin32() {
    }
    /*
     * Sets the specified environment variable to the specified value at the machine level (Windows only). If a variable with the same name already exists and is different than the specified
     * value, this will send a prompt request to the user via the provided logger to ask whether the existing variable should be overwritten. If the calling node.js process does not have
     * administrator privileges, the spawned process will fail and this method will return a rejected promise.
     *
     * @param {string} name The name of the environment variable to set
     * @param {string} value The desired value for the specified environment variable
     * @param {InstallerProtocol.ILogger} logger The logger for the process
     *
     * @return {Q.Promise<any>} A promise resolved with an empty object if the operation succeeds, or rejected with the appropriate error if not
     */
    InstallerUtilsWin32.setEnvironmentVariableIfNeededWin32 = function (name, value, logger) {
        return installerUtils.mustSetSystemVariable(name, value, logger)
            .then(function (mustSetVariable) {
            if (mustSetVariable) {
                return InstallerUtilsWin32.setEnvironmentVariableWin32(name, value);
            }
            return Q.resolve({});
        });
    };
    /*
     * Adds the specified value to the Path environment variable. If the provided value is already in the path, this method doesn't do anything. If the calling node.js process does not
     * have administrator privileges, the spawned process will fail and this method will return a rejected promise.
     *
     * @param {string[]} addToPath An array of path values to add to the Path environment variable
     *
     * @return {Q.Promise<any>} A promise resolved with an empty object if the operation succeeds, or rejected with the appropriate error if not
     */
    InstallerUtilsWin32.addToPathIfNeededWin32 = function (addToPath) {
        var pathName = "PATH"; // Windows is case-insensitive. We use uppercase to be more compatible with *nix systems
        var pathValue = tacoUtils.ProcessUtils.getProcess().env[pathName];
        addToPath.forEach(function (value) {
            if (!installerUtils.pathContains(value)) {
                pathValue = value + path.delimiter + pathValue;
            }
        });
        if (pathValue === tacoUtils.ProcessUtils.getProcess().env[pathName]) {
            return Q.resolve({});
        }
        return InstallerUtilsWin32.setEnvironmentVariableWin32(pathName, pathValue);
    };
    /*
     * Sets the specified environment variable to the specified value at the machine level (Windows only). If the calling node.js process does not have administrator privileges,
     * the spawned process will fail and this method will return a rejected promise.
     *
     * @param {string} name The name of the environment variable to set
     * @param {string} value The desired value for the specified environment variable
     *
     * @return {Q.Promise<any>} A promise resolved with an empty object if the operation succeeds, or rejected with the appropriate error if not
     */
    InstallerUtilsWin32.setEnvironmentVariableWin32 = function (name, value) {
        if (tacoUtils.ProcessUtils.getProcess().platform !== "win32") {
            // No-op for platforms other than win32
            return Q.resolve({});
        }
        // Set variable for this running process
        tacoUtils.ProcessUtils.getProcess().env[name] = value;
        // Set variable for the system
        var scriptPath = path.resolve(__dirname, "setSystemVariable.ps1");
        var command = "powershell";
        var commandArgs = [
            "-executionpolicy",
            "unrestricted",
            "-file",
            utilHelper.quotesAroundIfNecessary(scriptPath),
            name,
            value
        ];
        var deferred = Q.defer();
        var errorOutput = "";
        var variableProcess = childProcess.spawn(command, commandArgs, { stdio: ["ignore", "ignore", "pipe"] }); // Note: To workaround a Powershell hang on Windows 7, we set stdin and stdout to ignore, otherwise Powershell never returns
        variableProcess.stderr.on("data", function (data) {
            errorOutput += data.toString();
        });
        variableProcess.on("error", function (err) {
            // Handle ENOENT if Powershell is not found
            if (err.code === "ENOENT") {
                deferred.reject(new Error(resources.getString("NoPowershell")));
            }
            else {
                deferred.reject(new Error(resources.getString("UnableToSetVariable", name, err.name, value)));
            }
        });
        variableProcess.on("close", function (code) {
            if (errorOutput) {
                deferred.reject(new Error(errorOutput));
            }
            else {
                deferred.resolve({});
            }
        });
        return deferred.promise;
    };
    return InstallerUtilsWin32;
})();
module.exports = InstallerUtilsWin32;

//# sourceMappingURL=installerUtilsWin32.js.map
