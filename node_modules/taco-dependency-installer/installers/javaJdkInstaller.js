/**
  *******************************************************
  *                                                     *
  *   Copyright (C) Microsoft. All rights reserved.     *
  *                                                     *
  *******************************************************
  */
/// <reference path="../../typings/dependencyInstallerInterfaces.d.ts" />
/// <reference path="../../typings/Q.d.ts" />
/// <reference path="../../typings/request.d.ts" />
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var childProcess = require("child_process");
var os = require("os");
var path = require("path");
var Q = require("q");
var request = require("request");
var InstallerBase = require("./installerBase");
var installerUtils = require("../utils/installerUtils");
var installerUtilsWin32 = require("../utils/win32/installerUtilsWin32");
var resources = require("../resources/resourceManager");
var tacoUtils = require("taco-utils");
var utils = tacoUtils.UtilHelper;
var JavaJdkInstaller = (function (_super) {
    __extends(JavaJdkInstaller, _super);
    function JavaJdkInstaller(installerInfo, softwareVersion, installTo, logger, steps) {
        _super.call(this, installerInfo, softwareVersion, installTo, logger, steps, "java");
    }
    JavaJdkInstaller.prototype.downloadWin32 = function () {
        return this.downloadDefault();
    };
    JavaJdkInstaller.prototype.installWin32 = function () {
        var _this = this;
        var self = this;
        var deferred = Q.defer();
        // Make sure we have an install location
        if (!this.installDestination) {
            this.telemetry.add("error.description", "InstallDestination needed on installWin32", /*isPii*/ false);
            deferred.reject(new Error(resources.getString("NeedInstallDestination")));
        }
        else {
            // Run installer
            var commandLine = this.installerDownloadPath + " /quiet /norestart /lvx %temp%/javajdk.log /INSTALLDIR=" + utils.quotesAroundIfNecessary(this.installDestination);
            childProcess.exec(commandLine, function (err) {
                if (err) {
                    _this.telemetry.addError(err);
                    var code = err.code;
                    if (code) {
                        _this.telemetry
                            .add("error.description", "InstallerError on installWin32", /*isPii*/ false)
                            .add("error.code", code, /*isPii*/ false);
                        deferred.reject(new Error(resources.getString("InstallerError", self.installerDownloadPath, code)));
                    }
                    else {
                        _this.telemetry
                            .add("error.description", "CouldNotRunInstaller on installWin32", /*isPii*/ false)
                            .add("error.name", err.name, /*isPii*/ false);
                        deferred.reject(new Error(resources.getString("CouldNotRunInstaller", self.installerDownloadPath, err.name)));
                    }
                }
                else {
                    deferred.resolve({});
                }
            });
        }
        return deferred.promise;
    };
    JavaJdkInstaller.prototype.updateVariablesWin32 = function () {
        // Initialize values
        var javaHomeName = "JAVA_HOME";
        var javaHomeValue = this.installDestination;
        var addToPath = path.join(javaHomeValue, "bin");
        return installerUtilsWin32.setEnvironmentVariableIfNeededWin32(javaHomeName, javaHomeValue, this.logger)
            .then(function () {
            return installerUtilsWin32.addToPathIfNeededWin32([addToPath]);
        });
    };
    JavaJdkInstaller.prototype.downloadDarwin = function () {
        return this.downloadDefault();
    };
    JavaJdkInstaller.prototype.installDarwin = function () {
        var self = this;
        return this.attachDmg()
            .then(function () {
            return self.installPkg();
        })
            .finally(function () {
            return self.detachDmg();
        });
    };
    JavaJdkInstaller.prototype.attachDmg = function () {
        var _this = this;
        var self = this;
        var deferred = Q.defer();
        var command = "hdiutil attach " + this.installerDownloadPath;
        childProcess.exec(command, function (error, stdout, stderr) {
            // Save the mounted volume's name
            var stringOutput = stdout.toString();
            var capturedResult = /\/Volumes\/(.+)/.exec(stringOutput);
            self.darwinMountpointName = capturedResult[1];
            if (error) {
                _this.telemetry
                    .add("error.description", "ErrorOnChildProcess on attachDmg", /*isPii*/ false)
                    .addError(error);
                deferred.reject(error);
            }
            else {
                deferred.resolve({});
            }
        });
        return deferred.promise;
    };
    JavaJdkInstaller.prototype.installPkg = function () {
        var _this = this;
        var self = this;
        var deferred = Q.defer();
        var pkgPath = path.join("/", "Volumes", this.darwinMountpointName, this.darwinMountpointName + ".pkg");
        var commandLine = "installer -pkg \"" + pkgPath + "\" -target \"/\"";
        childProcess.exec(commandLine, function (err) {
            if (err) {
                _this.telemetry.addError(err);
                var code = err.code;
                if (code) {
                    _this.telemetry
                        .add("error.description", "InstallerError on installPkg", /*isPii*/ false)
                        .add("error.code", code, /*isPii*/ false);
                    deferred.reject(new Error(resources.getString("InstallerError", self.installerDownloadPath, code)));
                }
                else {
                    _this.telemetry
                        .add("error.description", "CouldNotRunInstaller on installPkg", /*isPii*/ false)
                        .add("error.name", err.name, /*isPii*/ false);
                    deferred.reject(new Error(resources.getString("CouldNotRunInstaller", self.installerDownloadPath, err.name)));
                }
            }
            else {
                deferred.resolve({});
            }
        });
        return deferred.promise;
    };
    JavaJdkInstaller.prototype.detachDmg = function () {
        var _this = this;
        var deferred = Q.defer();
        var mountPath = path.join("/", "Volumes", this.darwinMountpointName);
        var command = "hdiutil detach \"" + mountPath + "\"";
        childProcess.exec(command, function (error, stdout, stderr) {
            if (error) {
                _this.telemetry
                    .add("error.description", "ErrorOnChildProcess on detachDmg", /*isPii*/ false)
                    .addError(error);
                deferred.reject(error);
            }
            else {
                deferred.resolve({});
            }
        });
        return deferred.promise;
    };
    JavaJdkInstaller.prototype.downloadDefault = function () {
        this.installerDownloadPath = path.join(InstallerBase.installerCache, "javaJdk", os.platform(), this.softwareVersion, path.basename(this.installerInfo.installSource));
        // Prepare expected installer file properties
        var expectedProperties = {
            bytes: this.installerInfo.bytes,
            sha1: this.installerInfo.sha1
        };
        // Set up cookie
        var cookieContents = "oraclelicense=accept-securebackup-cookie; domain=.oracle.com; path=/";
        var cookieUrl = "http://oracle.com";
        var j = request.jar();
        var cookie = request.cookie(cookieContents);
        j.setCookie(cookie, cookieUrl);
        // Prepare download options
        var options = {
            uri: this.installerInfo.installSource,
            method: "GET",
            jar: j
        };
        // Download the installer
        return installerUtils.downloadFile(options, this.installerDownloadPath, expectedProperties);
    };
    return JavaJdkInstaller;
})(InstallerBase);
module.exports = JavaJdkInstaller;

//# sourceMappingURL=javaJdkInstaller.js.map
