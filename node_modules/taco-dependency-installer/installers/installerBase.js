/**
  *******************************************************
  *                                                     *
  *   Copyright (C) Microsoft. All rights reserved.     *
  *                                                     *
  *******************************************************
  */
/// <reference path="../../typings/dependencyInstallerInterfaces.d.ts" />
/// <reference path="../../typings/Q.d.ts" />
/// <reference path="../../typings/tacoUtils.d.ts" />
"use strict";
var path = require("path");
var Q = require("q");
var wrench = require("wrench");
var resources = require("../resources/resourceManager");
var tacoErrorCodes = require("../tacoErrorCodes");
var errorHelper = require("../tacoErrorHelper");
var tacoUtils = require("taco-utils");
var TacoErrorCodes = tacoErrorCodes.TacoErrorCode;
var InstallerBase = (function () {
    function InstallerBase(installerInfo, softwareVersion, installTo, logger, steps, id) {
        this.installerInfo = installerInfo;
        this.steps = steps;
        this.softwareVersion = softwareVersion;
        this.installDestination = installTo;
        this.logger = logger;
        this.id = id;
    }
    InstallerBase.prototype.run = function () {
        var _this = this;
        var self = this;
        return tacoUtils.TelemetryHelper.generate("Installer:" + this.id, function (telemetry) {
            _this.telemetry = telemetry; // So any method can access it
            return _this.download()
                .then(function () {
                return self.install();
            })
                .then(function () {
                return self.updateVariables();
            })
                .then(function () {
                return self.postInstall();
            })
                .then(function () {
                telemetry.step("logSuccess");
                self.logger.log(resources.getString("Success"));
            });
        });
    };
    InstallerBase.prototype.download = function () {
        if (!this.steps.download) {
            return Q({});
        }
        this.telemetry.step("download");
        this.logger.log(resources.getString("DownloadingLabel"));
        switch (tacoUtils.ProcessUtils.getProcess().platform) {
            case "win32":
                return this.downloadWin32();
            case "darwin":
                return this.downloadDarwin()
                    .then(function () {
                    // After we download something on Mac OS, we need to change the owner of the cached installer back to the current user, otherwise
                    // they won't be able to delete their taco_home folder without admin privileges
                    wrench.chownSyncRecursive(InstallerBase.installerCache, parseInt(tacoUtils.ProcessUtils.getProcess().env.SUDO_UID, 10), parseInt(tacoUtils.ProcessUtils.getProcess().env.SUDO_GID, 10));
                });
            default:
                return Q.reject(errorHelper.get(TacoErrorCodes.UnsupportedPlatform, tacoUtils.ProcessUtils.getProcess().platform));
        }
    };
    InstallerBase.prototype.downloadWin32 = function () {
        throw errorHelper.get(TacoErrorCodes.AbstractMethod);
    };
    InstallerBase.prototype.downloadDarwin = function () {
        throw errorHelper.get(TacoErrorCodes.AbstractMethod);
    };
    InstallerBase.prototype.install = function () {
        if (!this.steps.install) {
            return Q({});
        }
        this.telemetry.step("install");
        this.logger.log(resources.getString("InstallingLabel"));
        switch (tacoUtils.ProcessUtils.getProcess().platform) {
            case "win32":
                return this.installWin32();
            case "darwin":
                return this.installDarwin();
            default:
                return Q.reject(errorHelper.get(TacoErrorCodes.UnsupportedPlatform, tacoUtils.ProcessUtils.getProcess().platform));
        }
    };
    InstallerBase.prototype.installWin32 = function () {
        throw errorHelper.get(TacoErrorCodes.AbstractMethod);
    };
    InstallerBase.prototype.installDarwin = function () {
        throw errorHelper.get(TacoErrorCodes.AbstractMethod);
    };
    InstallerBase.prototype.updateVariables = function () {
        if (!this.steps.updateVariables) {
            return Q({});
        }
        this.telemetry.step("updateVariables");
        this.logger.log(resources.getString("SettingSystemVariablesLabel"));
        switch (tacoUtils.ProcessUtils.getProcess().platform) {
            case "win32":
                return this.updateVariablesWin32();
            case "darwin":
                return this.updateVariablesDarwin();
            default:
                return Q.reject(errorHelper.get(TacoErrorCodes.UnsupportedPlatform, tacoUtils.ProcessUtils.getProcess().platform));
        }
    };
    InstallerBase.prototype.updateVariablesWin32 = function () {
        throw errorHelper.get(TacoErrorCodes.AbstractMethod);
    };
    InstallerBase.prototype.updateVariablesDarwin = function () {
        throw errorHelper.get(TacoErrorCodes.AbstractMethod);
    };
    InstallerBase.prototype.postInstall = function () {
        if (!this.steps.postInstall) {
            return Q({});
        }
        this.telemetry.step("postInstall");
        this.logger.log(resources.getString("ConfiguringLabel"));
        switch (tacoUtils.ProcessUtils.getProcess().platform) {
            case "win32":
                return this.postInstallWin32();
            case "darwin":
                return this.postInstallDarwin();
            default:
                return Q.reject(errorHelper.get(TacoErrorCodes.UnsupportedPlatform, tacoUtils.ProcessUtils.getProcess().platform));
        }
    };
    InstallerBase.prototype.postInstallWin32 = function () {
        throw errorHelper.get(TacoErrorCodes.AbstractMethod);
    };
    InstallerBase.prototype.postInstallDarwin = function () {
        throw errorHelper.get(TacoErrorCodes.AbstractMethod);
    };
    InstallerBase.installerCache = path.join(tacoUtils.UtilHelper.tacoHome, "third-party-installers");
    return InstallerBase;
})();
module.exports = InstallerBase;

//# sourceMappingURL=installerBase.js.map
