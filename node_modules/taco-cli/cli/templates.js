// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for details.
/// <reference path="../../typings/node.d.ts" />
/// <reference path="../../typings/nopt.d.ts" />
/// <reference path="../../typings/tacoUtils.d.ts" />
/// <reference path="../../typings/tacoKits.d.ts" />
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var kitHelper = require("./utils/kitHelper");
var resources = require("../resources/resourceManager");
var tacoUtility = require("taco-utils");
var templateManager = require("./utils/templateManager");
var commands = tacoUtility.Commands;
var logger = tacoUtility.Logger;
var LoggerHelper = tacoUtility.LoggerHelper;
/**
 * Templates
 *
 * Handles "taco templates"
 */
var Templates = (function (_super) {
    __extends(Templates, _super);
    function Templates() {
        _super.apply(this, arguments);
    }
    Templates.prototype.runCommand = function () {
        var self = this;
        return this.getTemplatesToPrint()
            .then(function (templateList) {
            logger.log(resources.getString("CommandTemplatesHeader"));
            logger.logLine();
            LoggerHelper.logNameDescriptionTable(templateList.templates.map(function (value) {
                return { name: value.id, description: value.name };
            }));
            logger.logLine();
            logger.log(resources.getString("HowToUseCreateProjectWithTemplate"));
        });
    };
    Templates.prototype.parseArgs = function (args) {
        return { options: {}, original: [], remain: [] };
    };
    Templates.prototype.getTemplatesToPrint = function () {
        var templates = new templateManager(kitHelper);
        return templates.getAllTemplates();
    };
    return Templates;
}(commands.TacoCommandBase));
module.exports = Templates;

//# sourceMappingURL=templates.js.map
