// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for details.
/// <reference path="../../../typings/node.d.ts" />
/// <reference path="../../../typings/tacoUtils.d.ts" />
"use strict";
var path = require("path");
var ConnectionSecurityHelper = require("./connectionSecurityHelper");
var Settings = require("../utils/settings");
var BuildSettings = (function () {
    function BuildSettings(args) {
        this.buildCommand = args.buildCommand;
        this.platform = args.platform;
        this.configuration = args.configuration;
        this.projectSourceDir = path.resolve(args.projectSourceDir);
        this.buildServerUrl = Settings.getRemoteServerUrl(args.buildServerInfo);
        this.buildTarget = args.buildTarget;
        this.language = args.language;
        this.changeListJsonFile = args.changeListJsonFile;
        this.options = args.options;
        this.platformConfigurationBldDir = path.join(this.projectSourceDir, "remote", this.platform, this.configuration);
        this.cordovaVersion = args.cordovaVersion;
        // Build state and configuration
        this.incrementalBuild = null;
        this.agent = ConnectionSecurityHelper.getAgent(args.buildServerInfo);
    }
    Object.defineProperty(BuildSettings.prototype, "buildInfoFilePath", {
        get: function () {
            return path.join(this.platformConfigurationBldDir, "buildInfo.json");
        },
        enumerable: true,
        configurable: true
    });
    return BuildSettings;
}());
module.exports = BuildSettings;

//# sourceMappingURL=buildSettings.js.map
