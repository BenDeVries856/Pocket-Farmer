// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for details.
"use strict";
/// <reference path="../../cli/utils/settings.ts" />
var Settings = require("../../cli/utils/settings");
var RemoteMock = (function () {
    function RemoteMock() {
    }
    RemoteMock.makeCliMock = function (onError, onClose, desiredState, onQuestion) {
        return {
            question: function (question, callback) {
                switch (question) {
                    case "CommandRemoteQueryHost":
                        callback(desiredState.host);
                        break;
                    case "CommandRemoteQueryPort":
                        callback(desiredState.port.toString());
                        break;
                    case "CommandRemoteQueryPin":
                        callback(desiredState.pin);
                        break;
                    default:
                        onError(new Error("Unexpected query!"));
                }
                if (onQuestion) {
                    onQuestion();
                }
            },
            close: onClose
        };
    };
    RemoteMock.saveConfig = function (platform, config) {
        Settings.forgetSettings();
        return Settings.loadSettings().catch(function () {
            return { remotePlatforms: {} };
        }).then(function (settings) {
            if (!settings.remotePlatforms) {
                settings.remotePlatforms = {};
            }
            settings.remotePlatforms[platform] = config;
            return Settings.saveSettings(settings);
        });
    };
    return RemoteMock;
}());
module.exports = RemoteMock;

//# sourceMappingURL=remoteMock.js.map
